import tkinter as tk 
from tkinter import messagebox 
import sqlite3 
from tkinter import ttk 
 
# Создаем окно приложения 
window = tk.Tk() 
window.title("Список сотрудников компании") 
window.geometry("600x400") 
 
# Создаем базу данных и таблицу 
conn = sqlite3.connect('employees.db') 
cursor = conn.cursor() 
cursor.execute('''CREATE TABLE IF NOT EXISTS employees ( 
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    name TEXT NOT NULL, 
                    phone TEXT NOT NULL, 
                    email TEXT NOT NULL, 
                    salary REAL NOT NULL)''') 
conn.commit() 
 
# Функция для добавления нового сотрудника 
def add_employee(): 
    name = entry_name.get() 
    phone = entry_phone.get() 
    email = entry_email.get() 
    salary = entry_salary.get() 
 
    if name and phone and email and salary: 
        cursor.execute("INSERT INTO employees (name, phone, email, salary) VALUES (?, ?, ?, ?)", 
                       (name, phone, email, salary)) 
        conn.commit() 
        messagebox.showinfo("Успех", "Сотрудник успешно добавлен!") 
        clear_entries() 
        display_employees() 
    else: 
        messagebox.showerror("Ошибка", "Пожалуйста, заполните все поля!") 
 
# Функция для изменения текущего сотрудника 
def update_employee(): 
    selected_item = tree.selection() 
    if selected_item: 
        name = entry_name.get() 
        phone = entry_phone.get() 
        email = entry_email.get() 
        salary = entry_salary.get() 
 
        if name and phone and email and salary: 
            employee_id = tree.item(selected_item)['values'][0] 
            cursor.execute("UPDATE employees SET name=?, phone=?, email=?, salary=? WHERE id=?", 
                           (name, phone, email, salary, employee_id)) 
            conn.commit() 
            messagebox.showinfo("Успех", "Сотрудник успешно обновлен!") 
            clear_entries() 
            display_employees() 
        else: 
            messagebox.showerror("Ошибка", "Пожалуйста, заполните все поля!") 
    else: 
        messagebox.showerror("Ошибка", "Пожалуйста, выберите сотрудника для изменения!") 
 
# Функция для удаления сотрудника 
def delete_employee(): 
    selected_item = tree.selection() 
    if selected_item: 
        employee_id = tree.item(selected_item)['values'][0] 
        cursor.execute("DELETE FROM employees WHERE id=?", (employee_id,)) 
        conn.commit() 
        messagebox.showinfo("Успех", "Сотрудник успешно удален!") 
        clear_entries() 
        display_employees() 
    else: 
        messagebox.showerror("Ошибка", "Пожалуйста, выберите сотрудника для удаления!") 
 
# Функция для поиска сотрудника по ФИО 
def search_employee(): 
    search_name = entry_search.get() 
    if search_name: 
        cursor.execute("SELECT * FROM employees WHERE name LIKE ?", ('%' + search_name + '%',)) 
        rows = cursor.fetchall() 
        tree.delete(*tree.get_children()) 
        for row in rows: 
            tree.insert('', tk.END, values=row) 
    else: 
        messagebox.showerror("Ошибка", "Пожалуйста, введите ФИО для поиска!") 
 
# Функция для очистки полей ввода 
def clear_entries(): 
    entry_name.delete(0, tk.END) 
    entry_phone.delete(0, tk.END) 
    entry_email.delete(0, tk.END) 
    entry_salary.delete(0, tk.END) 
 
# Функция для отображения сотрудников в виджете Treeview 
def display_employees(): 
    cursor.execute("SELECT * FROM employees") 
    rows = cursor.fetchall() 
    tree.delete(*tree.get_children()) 
    for row in rows: 
        tree.insert('', tk.END, values=row) 
 
# Создаем виджеты 
label_name = tk.Label(window, text="ФИО:") 
label_name.pack() 
entry_name = tk.Entry(window) 
entry_name.pack() 
 
label_phone = tk.Label(window, text="Номер телефона:") 
label_phone.pack() 
entry_phone = tk.Entry(window) 
entry_phone.pack() 
 
label_email = tk.Label(window, text="Адрес электронной почты:") 
label_email.pack() 
entry_email = tk.Entry(window) 
entry_email.pack() 
 
label_salary = tk.Label(window, text="Заработная плата:") 
label_salary.pack() 
entry_salary = tk.
Entry(window) 
entry_salary.pack() 
 
button_add = tk.Button(window, text="Добавить сотрудника", command=add_employee) 
button_add.pack() 
 
button_update = tk.Button(window, text="Изменить сотрудника", command=update_employee) 
button_update.pack() 
 
button_delete = tk.Button(window, text="Удалить сотрудника", command=delete_employee) 
button_delete.pack() 
 
label_search = tk.Label(window, text="Поиск по ФИО:") 
label_search.pack() 
entry_search = tk.Entry(window) 
entry_search.pack() 
 
button_search = tk.Button(window, text="Найти", command=search_employee) 
button_search.pack() 
 
tree = ttk.Treeview(window, columns=("ID", "ФИО", "Номер телефона", "Адрес электронной почты", "Заработная плата")) 
tree.heading("ID", text="ID") 
tree.heading("ФИО", text="ФИО") 
tree.heading("Номер телефона", text="Номер телефона") 
tree.heading("Адрес электронной почты", text="Адрес электронной почты") 
tree.heading("Заработная плата", text="Заработная плата") 
tree.pack() 
 
# Отображаем сотрудников при запуске приложения 
display_employees() 
 
# Запускаем главный цикл приложения 
window.mainloop() 
 
# Закрываем соединение с базой данных 
cursor.close() 
conn.close()
